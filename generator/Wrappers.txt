// This file has been generated by Cartman300's WrapperGenerator

static void (luaI_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup) {
	return luaI_openlib(L, libname, l, nup);
}

static void (luaL_register) (lua_State *L, const char *libname, const luaL_Reg *l) {
	return luaL_register(L, libname, l);
}

static int (luaL_getmetafield) (lua_State *L, int obj, const char *e) {
	return luaL_getmetafield(L, obj, e);
}

static int (luaL_callmeta) (lua_State *L, int obj, const char *e) {
	return luaL_callmeta(L, obj, e);
}

static int (luaL_typerror) (lua_State *L, int narg, const char *tname) {
	return luaL_typerror(L, narg, tname);
}

static int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg) {
	return luaL_argerror(L, numarg, extramsg);
}

static const char *(luaL_checklstring) (lua_State *L, int numArg, size_t *l) {
	return luaL_checklstring(L, numArg, l);
}

static const char *(luaL_optlstring) (lua_State *L, int numArg, const char *def, size_t *l) {
	return luaL_optlstring(L, numArg, def, l);
}

static lua_Number (luaL_checknumber) (lua_State *L, int numArg) {
	return luaL_checknumber(L, numArg);
}

static lua_Number (luaL_optnumber) (lua_State *L, int nArg, lua_Number def) {
	return luaL_optnumber(L, nArg, def);
}

static lua_Integer (luaL_checkinteger) (lua_State *L, int numArg) {
	return luaL_checkinteger(L, numArg);
}

static lua_Integer (luaL_optinteger) (lua_State *L, int nArg, lua_Integer def) {
	return luaL_optinteger(L, nArg, def);
}

static void (luaL_checkstack) (lua_State *L, int sz, const char *msg) {
	return luaL_checkstack(L, sz, msg);
}

static void (luaL_checktype) (lua_State *L, int narg, int t) {
	return luaL_checktype(L, narg, t);
}

static void (luaL_checkany) (lua_State *L, int narg) {
	return luaL_checkany(L, narg);
}

static int (luaL_newmetatable) (lua_State *L, const char *tname) {
	return luaL_newmetatable(L, tname);
}

static void *(luaL_checkudata) (lua_State *L, int ud, const char *tname) {
	return luaL_checkudata(L, ud, tname);
}

static void (luaL_where) (lua_State *L, int lvl) {
	return luaL_where(L, lvl);
}

/* TODO
static int (luaL_error) (lua_State *L, const char *fmt, ...) {
	return luaL_error(L, fmt, ...);
}
*/

/* TODO
static int (luaL_checkoption) (lua_State *L, int narg, const char *def, const char *const lst[]) {
	return luaL_checkoption(L, narg, def, lst[]);
}
*/

static int (luaL_ref) (lua_State *L, int t) {
	return luaL_ref(L, t);
}

static void (luaL_unref) (lua_State *L, int t, int ref) {
	return luaL_unref(L, t, ref);
}

static int (luaL_loadfile) (lua_State *L, const char *filename) {
	return luaL_loadfile(L, filename);
}

static int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz, const char *name) {
	return luaL_loadbuffer(L, buff, sz, name);
}

static int (luaL_loadstring) (lua_State *L, const char *s) {
	return luaL_loadstring(L, s);
}

static lua_State *(luaL_newstate) (void) {
	return luaL_newstate();
}

static const char *(luaL_gsub) (lua_State *L, const char *s, const char *p, const char *r) {
	return luaL_gsub(L, s, p, r);
}

static const char *(luaL_findtable) (lua_State *L, int idx, const char *fname, int szhint) {
	return luaL_findtable(L, idx, fname, szhint);
}

static void (luaL_buffinit) (lua_State *L, luaL_Buffer *B) {
	return luaL_buffinit(L, B);
}

static char *(luaL_prepbuffer) (luaL_Buffer *B) {
	return luaL_prepbuffer(B);
}

static void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l) {
	return luaL_addlstring(B, s, l);
}

static void (luaL_addstring) (luaL_Buffer *B, const char *s) {
	return luaL_addstring(B, s);
}

static void (luaL_addvalue) (luaL_Buffer *B) {
	return luaL_addvalue(B);
}

static void (luaL_pushresult) (luaL_Buffer *B) {
	return luaL_pushresult(B);
}

static lua_State *(lua_newstate) (lua_Alloc f, void *ud) {
	return lua_newstate(f, ud);
}

static void (lua_close) (lua_State *L) {
	return lua_close(L);
}

static lua_State *(lua_newthread) (lua_State *L) {
	return lua_newthread(L);
}

static lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf) {
	return lua_atpanic(L, panicf);
}

static int (lua_gettop) (lua_State *L) {
	return lua_gettop(L);
}

static void (lua_settop) (lua_State *L, int idx) {
	return lua_settop(L, idx);
}

static void (lua_pushvalue) (lua_State *L, int idx) {
	return lua_pushvalue(L, idx);
}

static void (lua_remove) (lua_State *L, int idx) {
	return lua_remove(L, idx);
}

static void (lua_insert) (lua_State *L, int idx) {
	return lua_insert(L, idx);
}

static void (lua_replace) (lua_State *L, int idx) {
	return lua_replace(L, idx);
}

static int (lua_checkstack) (lua_State *L, int sz) {
	return lua_checkstack(L, sz);
}

static void (lua_xmove) (lua_State *from, lua_State *to, int n) {
	return lua_xmove(from, to, n);
}

static int (lua_isnumber) (lua_State *L, int idx) {
	return lua_isnumber(L, idx);
}

static int (lua_isstring) (lua_State *L, int idx) {
	return lua_isstring(L, idx);
}

static int (lua_iscfunction) (lua_State *L, int idx) {
	return lua_iscfunction(L, idx);
}

static int (lua_isuserdata) (lua_State *L, int idx) {
	return lua_isuserdata(L, idx);
}

static int (lua_type) (lua_State *L, int idx) {
	return lua_type(L, idx);
}

static const char *(lua_typename) (lua_State *L, int tp) {
	return lua_typename(L, tp);
}

static int (lua_equal) (lua_State *L, int idx1, int idx2) {
	return lua_equal(L, idx1, idx2);
}

static int (lua_rawequal) (lua_State *L, int idx1, int idx2) {
	return lua_rawequal(L, idx1, idx2);
}

static int (lua_lessthan) (lua_State *L, int idx1, int idx2) {
	return lua_lessthan(L, idx1, idx2);
}

static lua_Number (lua_tonumber) (lua_State *L, int idx) {
	return lua_tonumber(L, idx);
}

static lua_Integer (lua_tointeger) (lua_State *L, int idx) {
	return lua_tointeger(L, idx);
}

static int (lua_toboolean) (lua_State *L, int idx) {
	return lua_toboolean(L, idx);
}

static const char *(lua_tolstring) (lua_State *L, int idx, size_t *len) {
	return lua_tolstring(L, idx, len);
}

static size_t (lua_objlen) (lua_State *L, int idx) {
	return lua_objlen(L, idx);
}

static lua_CFunction (lua_tocfunction) (lua_State *L, int idx) {
	return lua_tocfunction(L, idx);
}

static void *(lua_touserdata) (lua_State *L, int idx) {
	return lua_touserdata(L, idx);
}

static lua_State *(lua_tothread) (lua_State *L, int idx) {
	return lua_tothread(L, idx);
}

static const void *(lua_topointer) (lua_State *L, int idx) {
	return lua_topointer(L, idx);
}

static void (lua_pushnil) (lua_State *L) {
	return lua_pushnil(L);
}

static void (lua_pushnumber) (lua_State *L, lua_Number n) {
	return lua_pushnumber(L, n);
}

static void (lua_pushinteger) (lua_State *L, lua_Integer n) {
	return lua_pushinteger(L, n);
}

static void (lua_pushlstring) (lua_State *L, const char *s, size_t l) {
	return lua_pushlstring(L, s, l);
}

static void (lua_pushstring) (lua_State *L, const char *s) {
	return lua_pushstring(L, s);
}

static const char *(lua_pushvfstring) (lua_State *L, const char *fmt, va_list argp) {
	return lua_pushvfstring(L, fmt, argp);
}

/* TODO
static const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...) {
	return lua_pushfstring(L, fmt, ...);
}
*/

static void (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n) {
	return lua_pushcclosure(L, fn, n);
}

static void (lua_pushboolean) (lua_State *L, int b) {
	return lua_pushboolean(L, b);
}

static void (lua_pushlightuserdata) (lua_State *L, void *p) {
	return lua_pushlightuserdata(L, p);
}

static int (lua_pushthread) (lua_State *L) {
	return lua_pushthread(L);
}

static void (lua_gettable) (lua_State *L, int idx) {
	return lua_gettable(L, idx);
}

static void (lua_getfield) (lua_State *L, int idx, const char *k) {
	return lua_getfield(L, idx, k);
}

static void (lua_rawget) (lua_State *L, int idx) {
	return lua_rawget(L, idx);
}

static void (lua_rawgeti) (lua_State *L, int idx, int n) {
	return lua_rawgeti(L, idx, n);
}

static void (lua_createtable) (lua_State *L, int narr, int nrec) {
	return lua_createtable(L, narr, nrec);
}

static void *(lua_newuserdata) (lua_State *L, size_t sz) {
	return lua_newuserdata(L, sz);
}

static int (lua_getmetatable) (lua_State *L, int objindex) {
	return lua_getmetatable(L, objindex);
}

static void (lua_getfenv) (lua_State *L, int idx) {
	return lua_getfenv(L, idx);
}

static void (lua_settable) (lua_State *L, int idx) {
	return lua_settable(L, idx);
}

static void (lua_setfield) (lua_State *L, int idx, const char *k) {
	return lua_setfield(L, idx, k);
}

static void (lua_rawset) (lua_State *L, int idx) {
	return lua_rawset(L, idx);
}

static void (lua_rawseti) (lua_State *L, int idx, int n) {
	return lua_rawseti(L, idx, n);
}

static int (lua_setmetatable) (lua_State *L, int objindex) {
	return lua_setmetatable(L, objindex);
}

static int (lua_setfenv) (lua_State *L, int idx) {
	return lua_setfenv(L, idx);
}

static void (lua_call) (lua_State *L, int nargs, int nresults) {
	return lua_call(L, nargs, nresults);
}

static int (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc) {
	return lua_pcall(L, nargs, nresults, errfunc);
}

static int (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud) {
	return lua_cpcall(L, func, ud);
}

static int (lua_load) (lua_State *L, lua_Reader reader, void *dt, const char *chunkname) {
	return lua_load(L, reader, dt, chunkname);
}

static int (lua_dump) (lua_State *L, lua_Writer writer, void *data) {
	return lua_dump(L, writer, data);
}

static int (lua_yield) (lua_State *L, int nresults) {
	return lua_yield(L, nresults);
}

static int (lua_resume) (lua_State *L, int narg) {
	return lua_resume(L, narg);
}

static int (lua_status) (lua_State *L) {
	return lua_status(L);
}

static int (lua_gc) (lua_State *L, int what, int data) {
	return lua_gc(L, what, data);
}

static int (lua_error) (lua_State *L) {
	return lua_error(L);
}

static int (lua_next) (lua_State *L, int idx) {
	return lua_next(L, idx);
}

static void (lua_concat) (lua_State *L, int n) {
	return lua_concat(L, n);
}

static lua_Alloc (lua_getallocf) (lua_State *L, void **ud) {
	return lua_getallocf(L, ud);
}

static void (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud) {
	return lua_setallocf(L, f, ud);
}

static void (lua_setlevel) (lua_State *from, lua_State *to) {
	return lua_setlevel(from, to);
}

static int (lua_getstack) (lua_State *L, int level, lua_Debug *ar) {
	return lua_getstack(L, level, ar);
}

static int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar) {
	return lua_getinfo(L, what, ar);
}

static const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n) {
	return lua_getlocal(L, ar, n);
}

static const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n) {
	return lua_setlocal(L, ar, n);
}

static const char *(lua_getupvalue) (lua_State *L, int funcindex, int n) {
	return lua_getupvalue(L, funcindex, n);
}

static const char *(lua_setupvalue) (lua_State *L, int funcindex, int n) {
	return lua_setupvalue(L, funcindex, n);
}

static int (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count) {
	return lua_sethook(L, func, mask, count);
}

static lua_Hook (lua_gethook) (lua_State *L) {
	return lua_gethook(L);
}

static int (lua_gethookmask) (lua_State *L) {
	return lua_gethookmask(L);
}

static int (lua_gethookcount) (lua_State *L) {
	return lua_gethookcount(L);
}

